package my.projects.githubclient.model.data

import androidx.room.Entity
import androidx.room.PrimaryKey
import com.squareup.moshi.JsonClass


@JsonClass(generateAdapter = true)
data class User(
    val login               : String,
    val id                  : Int,
    val node_id             : String,
    val avatar_url          : String,
    val gravatar_id         : String,
    val url                 : String,
    val html_url            : String,
    val followers_url       : String,
    val following_url       : String,
    val gists_url           : String,
    val starred_url         : String,
    val subscriptions_url   : String,
    val organizations_url   : String,
    val repos_url           : String,
    val events_url          : String,
    val received_events_url : String,
    val type                : String,
    val site_admin          : Boolean,
    val name                : String?,
    val company             : String?,
    val blog                : String,
    val location            : String?,
    val email               : String?,
    val hireable            : Boolean?,
    val bio                 : String?,
    val twitter_username    : String?,
    val public_repos        : Int,
    val public_gists        : Int,
    val followers           : Int,
    val following           : Int,
    val created_at          : String,
    val updated_at          : String
) {
    fun toOwner() = Owner(
        login = login,
        id = id,
        avatar_url = avatar_url,
        gravatar_id = gravatar_id,
        url = url,
        type = type,
        site_admin = site_admin)
}

@Entity(tableName = "auth_users")
data class AuthUser(
    val login                       : String,
    @PrimaryKey
    val id                          : Int,
    val node_id                     : String,
    val avatar_url                  : String,
    val gravatar_id                 : String,
    val url                         : String,
    val html_url                    : String,
    val followers_url               : String,
    val following_url               : String,
    val gists_url                   : String,
    val starred_url                 : String,
    val subscriptions_url           : String,
    val organizations_url           : String,
    val repos_url                   : String,
    val events_url                  : String,
    val received_events_url         : String,
    val type                        : String,
    val site_admin                  : Boolean,
    val name                        : String?,
    val company                     : String?,
    val blog                        : String,
    val location                    : String?,
    val email                       : String?,
    val hireable                    : Boolean?,
    val bio                         : String?,
    val twitter_username            : String?,
    val public_repos                : Int,
    val public_gists                : Int,
    val followers                   : Int,
    val following                   : Int,
    val created_at                  : String,
    val updated_at                  : String,
    val private_gists               : Int,
    val total_private_repos         : Int,
    val owned_private_repos         : Int,
    val disk_usage                  : Int,
    val collaborators               : Int,
    val two_factor_authentication   : Boolean
) {
    fun toUser() = User(
        login               = login,
        id                  = id,
        node_id             = node_id,
        avatar_url          = avatar_url,
        gravatar_id         = gravatar_id,
        url                 = url,
        html_url            = html_url,
        followers_url       = followers_url,
        following_url       = following_url,
        gists_url           = gists_url,
        starred_url         = starred_url,
        subscriptions_url   = subscriptions_url,
        organizations_url   = organizations_url,
        repos_url           = repos_url,
        events_url          = events_url,
        received_events_url = received_events_url,
        type                = type,
        site_admin          = site_admin,
        name                = name,
        company             = company,
        blog                = blog,
        location            = location,
        email               = email,
        hireable            = hireable,
        bio                 = bio,
        twitter_username    = twitter_username,
        public_repos        = public_repos,
        public_gists        = public_gists,
        followers           = followers,
        following           = following,
        created_at          = created_at,
        updated_at          = updated_at,
    )

    fun toOwner() = Owner(
        login = login,
        id = id,
        avatar_url = avatar_url,
        gravatar_id = gravatar_id,
        url = url,
        type = type,
        site_admin = site_admin)
}